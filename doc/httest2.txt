+HTTEST 2.1
This is experimental code. The stable code is in the branche httest-2.0.

Do restructure the code base to make it readable and extentable. This is a 
preparation for httest3 test microkernel.

++GOALS
- Capsulate topics into modules. 
- Use ANY transport for testing i.e. socket, ssl, file, pipe and io.
- Low Memory Usage

++MODULE
A init function do hook everything into httest. A uniq key (a pool alloc of
a void pointer) will be used to store modules own stuff in a workers config 
hash.

There are three types of stuff to register:
  commands
  hooks
  transport object

The transport object can be reregistered at any time by any module. For example
SSL:CONNECT
Or
_REQ <host> SSL:<port>
Will register first the socket then overwrite it with the ssl transport object

_CLOSE
will unregister socket and ssl transport object

The default registered transport should be the socket transport object.

++TRANSPORT
Modules have a init function and implement commands and given hooks.
The transport, do have some difficulties. I explain this in an example:
Think about using chached SSL
  htt -> cache -> ssl -> socket

But SSL do use there own socket implementation, therefor I can not cleany
stack this togetherr. If I add the ssl element I must avoid socket, because
this is inside the SSL stack. But from the point of SSL I do not need the
know that this is socket, because the following is also thinkable:
  htt -> cache -> ssl -> pipe

This all starts with for example
  htt -> cache -> socket

Then extend it with 
  htt -> cache -> ssl(socket)

Or
  htt -> cache -> pipe

With
  htt -> cache -> ssl(pipe)

For the first instance we concentrate us for that
  htt -> cache -> transport

where transport is either socket, ssl or file. With the connection process
I can fix the transport to any of this three.

This means also that I have to capsulate the socket into socket_module :)
A module should be able to register a own transport hook. I think the cache may
be a htt own function which then calls the transport over a fixed interface.

status read(buf, len)
status peek(buf, len)
status write(buf, len)

++VARIABLES
Variables should be stored in a variable store. Array and hash variables would also
be cool.

If a value is stored on a value, release the old value. We could solve this by construct
a variable struct and give every variable its own pool. After a couple of value changes
the variable pool could be resetet and reused. Perhaps reset on every change is overkill?

New types of structured variables are needed to make GUI testing possible and readable.

+++HASH VARIBALES
_SET A[foo]=bar
_SET A[bar]=foo

-> Resolved $A will be foo=bar&bar=foo
-> Resolved $A[foo] will be bar
-> Resolved $A[bar] will be foo
-> And if B=foo then $A[$B] will be bar :)

Perhaps there are a simpler way?

_HASH:SET A[foo]=bar
_HASH:SET A[bar]=foo

would be the same as if you type -> _SET A=foo=bar&bar=foo.
But how do we resolve $A[bar] inline? Need a hook were I get the line untouched 
before httest core do replace stuff. Another way would be naming hash entries 
@A[bar] or %A[bar] or something like that.

Also an unset call is needed. Perhaps I should do this in the core and not in a
module anyway.

++POOLS
For the moment we have only one pool which last for a hole body. Better would be to give
the temporary call_pool to interperter, where a block could use this pool for temporary
allocations to save memory.

